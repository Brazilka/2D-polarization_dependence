# -*- coding: utf-8 -*-
"""2D polarization dependence.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OsEgdJamOfK1MFmvESRuG0oxvD5KRU9C
"""

# #### SOME FEATURES NOT WORKING YET :(
### 2D plot dependence of theta on phi for B2###
import numpy as np
import matplotlib.pyplot as plt

# theta and phi in degrees, convert to radians
theta_deg = np.linspace(0, 360, 360)
theta = np.radians(theta_deg)
phi_deg = np.linspace(0, 360, 360)
phi = np.radians(phi_deg)

# create 2d grid, define tensor
theta_grid, phi_grid = np.meshgrid(theta, phi)
a = 2
R_A1 = np.array([[a, 0, 0],
                 [0, a, 0],
                 [0, 0, a]])

# dot product of theta_i on phi_s, intensity as e_s^T * R * e_i
dot_product_values = np.zeros_like(theta_grid)
cross_product_values = np.zeros_like(theta_grid)
sc_intensity = np.zeros_like(theta_grid)

for i in range(theta_grid.shape[0]):
    for j in range(theta_grid.shape[1]):
        theta_val = theta_grid[i, j]
        phi_val = phi_grid[i, j]
        e_i = np.array([np.cos(theta_val), np.sin(theta_val), 0])
        e_s = np.array([a * np.sin(phi_val), a * np.cos(phi_val), 0])
        # Dot product and cross product
        dot_product_values[i, j] = np.dot(e_i, e_s)
        cross_product = np.cross(e_i, e_s)
        cross_product_values[i, j] = np.linalg.norm(cross_product)
        # Scattering intensity
        sc_field = np.dot(e_s.T, np.dot(R_A1, e_i))
        sc_intensity[i, j] = np.abs(sc_field)**2

# Find where the dot product is zero (orthogonal vectors)
dot_zero = np.isclose(dot_product_values, 0, atol=1e-6)
dot_zero_indices = np.where(dot_zero)
dot_zero_intensities = sc_intensity[dot_zero_indices]

# orthogonal vectors
print("Intensity for orthogonal vectors:")
for i in range(len(dot_zero_indices[0])):
    theta_val = np.degrees(theta_grid[dot_zero_indices[0][i], dot_zero_indices[1][i]])
    phi_val = np.degrees(phi_grid[dot_zero_indices[0][i], dot_zero_indices[1][i]])
    intensity = dot_zero_intensities[i]
    print(f"Theta: {theta_val:.2f}, Phi: {phi_val:.2f}, Intensity: {intensity:.4f}")

# #### NOT WORKING YET parallel vectors
cross_zero = np.isclose(cross_product_values, 0, atol=1e-6)
cross_zero_indices = np.where(cross_zero)
cross_zero_intensities = sc_intensity[cross_zero_indices]
print("\nIntensity for parallel vectors:")
for i in range(len(cross_zero_indices[0])):
    theta_val = np.degrees(theta_grid[cross_zero_indices[0][i], cross_zero_indices[1][i]])
    phi_val = np.degrees(phi_grid[cross_zero_indices[0][i], cross_zero_indices[1][i]])
    intensity = cross_zero_intensities[i]
    print(f"Theta: {theta_val:.2f}, Phi: {phi_val:.2f}, Intensity: {intensity:.4f}")



# plot dot product (2D)
plt.figure(figsize=(10, 8))
plt.imshow(dot_product_values, extent=[0, 360, 0, 360], origin='lower', aspect='auto', cmap='coolwarm')
plt.colorbar()
plt.title('Dot Product of $\mathbf{e}_i$ and $\mathbf{e}_s$ for $\mathit{A}_1$', fontsize=16)
plt.xlabel(r'$θ_{i}$ (°)', fontsize=15)
plt.ylabel(r'$φ_{s}$ (°)', fontsize=15)
plt.grid(False)
plt.show()

# plot intensity (2D)
plt.figure(figsize=(10, 8))
plt.imshow(sc_intensity, extent=[0, 360, 0, 360], origin='lower', aspect='auto', cmap='viridis')
plt.colorbar(label='Intensity (a.u.)')
plt.title('Scattered Intensity for All Theta and Phi Combinations', fontsize=16)
plt.xlabel('Theta (°)', fontsize=14)
plt.ylabel('Phi (°)', fontsize=14)
plt.grid(False)
plt.show()

# plot (theta, phi) values of orthogonal vectors
indices = np.argwhere(dot_product_values == 0) #find every i,j where the dot product is zero
dot_product_zero = np.array(indices)
x = indices[:,0]
y = indices[:,1]
plt.figure(figsize=(8, 8))
plt.scatter(x, y, c='black', marker='x', label='Zero values')  # crosses as markers
plt.xlim(0, 360)
plt.ylim(0, 360)
plt.title('Plot of Zero Values in Matrix')
plt.xlabel('X-axis (Columns)')
plt.ylabel('Y-axis (Rows)')
plt.legend()
plt.grid(True)
plt.show()

print(dot_product_zero)

